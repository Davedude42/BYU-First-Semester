{
    "tests": [
        {
            "score": 10,
            "max_score": 10,
            "name": "test_digit_counter.py::test_digit_counter",
            "output": "\n",
            "visibility": "visible"
        },
        {
            "score": 10,
            "max_score": 10,
            "name": "test_square_root.py::test_square_root",
            "output": "(3.0, 24)\n\n",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "test_extra_practice.py::test_largest_factor",
            "output": "\nlargest_factor = <function largest_factor at 0x7ce54bc3b100>\n\n    @with_import('extra_practice', 'largest_factor')\n    def test_largest_factor(largest_factor):\n>       assert largest_factor(0) == 0\nE       assert 1 == 0\nE        +  where 1 = <function largest_factor at 0x7ce54bc3b100>(0)\n\ntest_extra_practice.py:6: AssertionError",
            "visibility": "visible"
        },
        {
            "score": 0,
            "max_score": 0,
            "name": "test_extra_practice.py::test_missing_digits",
            "output": "\nmissing_digits = <function missing_digits at 0x7ce54bc3b240>\n\n    @with_import('extra_practice', 'missing_digits')\n    def test_missing_digits(missing_digits):\n        assert missing_digits(33) == 0\n>       assert missing_digits(1278) == 4\nE       assert 7 == 4\nE        +  where 7 = <function missing_digits at 0x7ce54bc3b240>(1278)\n\ntest_extra_practice.py:21: AssertionError",
            "visibility": "visible"
        }
    ]
}